%info
UDP Traffic loop Module, using 4 NICs

This will generate UDP traffic using 4 NICs.
Packets are expected to come back, and the sum of UDP
traffic is accounted for and printed as the RESULT.

GEN_WAIT is the test time, while the client generates $GEN_FLOWS flows of $GEN_BURST packets in loop

%config
default_role_map={dut:client,server:client}
require_tags=import,dpdk

%variables
GEN_BURST=32
GEN_FLOWS=128
GEN_LENGTH=64
GEN_WAIT=5

%late_variables python-inline
GEN_TOT=EXPAND( $(( $GEN_BURST * $GEN_FLOWS )) )

%script deps=fastclick sudo=true delay=2
click --dpdk -c 0xffff -- PKTGEN_CONFIG

%file PKTGEN_CONFIG

elementclass Generator { $port,$th, $srcmac, $dstmac, $srcip, $dstip |
    tdOUT::ToDPDKDevice($port, BLOCKING true);

    adv1 :: FastUDPFlows(RATE 0, LIMIT $GEN_TOT, LENGTH $GEN_LENGTH, SRCETH $srcmac, DSTETH $dstmac, SRCIP $srcip, DSTIP $dstip, FLOWS $GEN_FLOWS, FLOWSIZE $GEN_BURST)
    -> MarkMACHeader
    -> EnsureDPDKBuffer
    -> replay :: ReplayUnqueue(STOP -1, QUICK_CLONE true)
    -> sndavg :: AverageCounter()
    -> tdOUT;

    StaticThreadSched(replay $th)

    fd :: FromDPDKDevice($port, MAC $srcmac, MAXTHREADS 1, VERBOSE 99)
    -> c0 :: Classifier(12/0806 20/0001,
                        12/0806 20/0002,
                        -)[2]
    -> avg :: AverageCounter
    -> Discard;

    c0[0] -> ARPResponder($srcip $srcmac)
          -> tdOUT;
    c0[1] -> Discard;
}

gen0 :: Generator(${client:0:pci}, 0, ${client:0:mac}, ${dut:0:mac}, ${client:0:ip}, ${client:1:ip})
gen1 :: Generator(${client:1:pci}, 1, ${client:1:mac}, ${dut:1:mac}, ${client:1:ip}, ${client:0:ip})
gen2 :: Generator(${client:2:pci}, 2, ${client:2:mac}, ${dut:2:mac}, ${client:2:ip}, ${client:3:ip})
gen3 :: Generator(${client:3:pci}, 3, ${client:3:mac}, ${dut:3:mac}, ${client:3:ip}, ${client:2:ip})

DriverManager(
    wait 2s,
    write gen0/avg.reset,
    write gen1/avg.reset,
    write gen2/avg.reset,
    write gen3/avg.reset,
    wait $GEN_WAIT,
    print "SAVG0 $(gen0/sndavg.link_rate)",
    print "SAVG1 $(gen1/sndavg.link_rate)",
    print "SAVG2 $(gen2/sndavg.link_rate)",
    print "SAVG3 $(gen3/sndavg.link_rate)",
    print "AVG0 $(gen0/avg.link_rate) $(gen0/avg.count)",
    print "AVG1 $(gen1/avg.link_rate) $(gen1/avg.count)",
    print "AVG2 $(gen2/avg.link_rate) $(gen2/avg.count)",
    print "AVG3 $(gen3/avg.link_rate) $(gen3/avg.count)",
    print "RESULT-TX $(add $(gen0/sndavg.link_rate) $(gen1/sndavg.link_rate) $(gen2/sndavg.link_rate) $(gen3/sndavg.link_rate))",
    print "RESULT-THROUGHPUT $(add $(gen0/avg.link_rate) $(gen1/avg.link_rate) $(gen2/avg.link_rate) $(gen3/avg.link_rate))")

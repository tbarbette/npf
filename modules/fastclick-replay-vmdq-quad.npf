%info
This is not a test, this is a module to be imported using "%import" to run a pktgen to compute latency of some DUT using FastClick. The traffic is read from traces and replayed in loop.

Packets are directed towards the server NIC 0 MAC address using the client NIC 0 and expect to receive packets back on the NIC 1. There is no L3 support (ARP).

Suggested usage example in your test (omit the prefixed "//" that prevent loop import here)

//%import@client fastclick-replay-dual traceIN=path/to.pcap traceOUT=path/to.pcap

%config
n_retry=0
n_runs=1
require_tags=import,dpdk

%variables
PKTGEN_BURST_OUT=32
PKTGEN_REPLAY_COUNT=1
NQ=0
mt=3 //3 threads per FD, as out of 16 we can use 3, this will force every FD to have the same amount

nolinktest=0

%script sudo=true deps=fastclick
click --dpdk -c 0xffff -- PKTGEN-CONFIG

%file PKTGEN-CONFIG
define($bout $PKTGEN_BURST_OUT)

define($ignore 0)
define($wait 2)
define($replay_count $PKTGEN_REPLAY_COUNT)
define($quick true)
define($txverbose 99)
define($rxverbose 99)


DPDKInfo(1048576)

elementclass Dual { $portIN, $portOUT, $INsrcmac,$RAW_INsrcmac,$OUTsrcmac
    ,$RAW_OUTsrcmac,$INdstmac,$RAW_INdstmac,$OUTdstmac,$RAW_OUTdstmac, $IP0, $IP1, $rth
 |

    fdIN :: FromDump($traceIN, STOP false, TIMING false, END_AFTER 4)
    tdIN :: ToDPDKDevice($portIN, BLOCKING true, BURST $bout, VERBOSE $txverbose)

    fdOUT :: FromDump($traceOUT, STOP false, TIMING false)
    tdOUT :: ToDPDKDevice($portOUT, BLOCKING true, BURST $bout, VERBOSE $txverbose)


    replay :: MultiReplayUnqueue(STOP 0,QUICK_CLONE $quick, VERBOSE true, ACTIVE true)
    StaticThreadSched(replay $rth)

    elementclass Numberise { $dstId |
        input
        -> StoreEtherAddress($GEN_MAC, dst)
        -> StoreData(4, \<0$dstId>)
        -> {
            input[0] -> StoreData(5, \<00>) -> [0]output
            input[0] -> StoreData(5, \<01>) -> [1]output
            input[0] -> StoreData(5, \<02>) -> [2]output
            input[0] -> StoreData(5, \<03>) -> [3]output
            input[0] -> StoreData(5, \<04>) -> [4]output
            input[0] -> StoreData(5, \<05>) -> [5]output
            input[0] -> StoreData(5, \<06>) -> [6]output
            input[0] -> StoreData(5, \<07>) -> [7]output
            input[0] -> StoreData(5, \<08>) -> [8]output
            input[0] -> StoreData(5, \<09>) -> [9]output
            input[0] -> StoreData(5, \<0a>) -> [10]output
            input[0] -> StoreData(5, \<0b>) -> [11]output
            input[0] -> StoreData(5, \<0c>) -> [12]output
            input[0] -> StoreData(5, \<0d>) -> [13]output
            input[0] -> StoreData(5, \<0e>) -> [14]output
            input[0] -> StoreData(5, \<0f>) -> [15]output
            input[0] -> StoreData(5, \<10>) -> [16]output
            input[0] -> StoreData(5, \<11>) -> [17]output
            input[0] -> StoreData(5, \<12>) -> [18]output
            input[0] -> StoreData(5, \<13>) -> [19]output
            input[0] -> StoreData(5, \<14>) -> [20]output
            input[0] -> StoreData(5, \<15>) -> [21]output
            input[0] -> StoreData(5, \<16>) -> [22]output
            input[0] -> StoreData(5, \<17>) -> [23]output
            input[0] -> StoreData(5, \<18>) -> [24]output
            input[0] -> StoreData(5, \<19>) -> [25]output
            input[0] -> StoreData(5, \<1a>) -> [26]output
            input[0] -> StoreData(5, \<1b>) -> [27]output
            input[0] -> StoreData(5, \<1c>) -> [28]output
            input[0] -> StoreData(5, \<1d>) -> [29]output
            input[0] -> StoreData(5, \<1e>) -> [30]output
            input[0] -> StoreData(5, \<1f>) -> [31]output

        }
        => [0-31] rr :: RoundRobinSched(MAX $CPUNR)
        -> Strip(14) -> check :: CheckIPHeader -> nPacket :: NumberPacket(40) -> SetIPChecksum -> Unstrip(14) -> output
    }

    fdIN -> rwIN :: EtherRewrite($INsrcmac,$INdstmac)
      -> NIN :: Numberise ($portIN)
      ->  EnsureDPDKBuffer
      -> [0]replay[0]
      -> tr :: RecordTimestamp(N 1048576)
      -> avgSIN :: AverageCounterMP(IGNORE $ignore)
      -> tdIN

    fdOUT -> rwOUT :: EtherRewrite($OUTsrcmac,$OUTdstmac)
      -> NOUT :: Numberise($portOUT)
      -> EnsureDPDKBuffer
      -> [1]replay[1]
      -> trOUT :: RecordTimestamp(N 1048576)
      -> avgSOUT :: AverageCounterMP(IGNORE $ignore)
      -> tdOUT

    receiveIN :: FromDPDKDevice($portIN, VERBOSE $rxverbose, MAC $INsrcmac, PROMISC false, MAXTHREADS $mt)
    receiveOUT :: FromDPDKDevice($portOUT, VERBOSE $rxverbose, MAC $OUTsrcmac, PROMISC false, MAXTHREADS $mt)

    elementclass Receiver { $mac, $dir |
        input ->

        c::Classifier(0/$mac,-)->

        Strip(14) ->
        CheckIPHeader ->
//        chPacket :: CheckNumberPacket() ->
        Unstrip(14) ->
        output;

        c[1]
    //    -> Print("Bad MAC received $dir :",MAXLENGTH -1)
        -> Discard;

     /*   chPacket[1] -> Unstrip(14)
    //    -> Print("Bad Packet number in $dir", -1)
        -> Discard;*/
    }

    receiveIN
    //-> Print("INBACK $INsrcmac")
    -> RINswitch :: Switch(2) -> RIN :: Receiver($RAW_INsrcmac,"IN")
    //-> IPPrint(IN)
    -> Strip(14) -> tsdIN :: TimestampDiff(RECORDER trOUT, N 1048576) -> Unstrip(14)
    -> avgRIN :: AverageCounterMP(IGNORE $ignore) -> Discard;
    receiveOUT
    //-> Print("OUTBACK $OUTsrcmac")
    -> ROUTswitch :: Switch(2) -> ROUT :: Receiver($RAW_OUTsrcmac,"OUT")
    //-> IPPrint(OUT)
      -> Strip(14) -> tsd :: TimestampDiff(RECORDER tr, N 1048576) -> Unstrip(14)
    -> avgROUT :: AverageCounterMP(IGNORE $ignore) -> Discard;


    //----------------
    //Link initializer
    //----------------
    adv0 :: FastUDPFlows(RATE 0, LIMIT -1, LENGTH 64, SRCETH $INsrcmac, DSTETH $OUTsrcmac, SRCIP $IP0, DSTIP $IP1, FLOWS 1, FLOWSIZE 1)
        -> advq0 :: RatedUnqueue(1)
        -> tdIN;
    adv1 :: FastUDPFlows(RATE 0, LIMIT -1, LENGTH 64, SRCETH $OUTsrcmac, DSTETH $INsrcmac, SRCIP $IP1, DSTIP $IP0, FLOWS 1, FLOWSIZE 1)
        -> advq1 :: RatedUnqueue(1)
        -> tdOUT;

    //Check that it received its packet from 2 outputs and emits packets on output 0 when it's the case
    linkoklock :: PathSpinlock() [0-1]
      => linkok :: Script(TYPE PACKET,
                init a 0,
                init b 0,
                init c 0,
                goto i0 $(eq $input 0),
                goto i1 $(eq $input 1),
                error "Unknown input $input",
                exit,
                label i0,
                set a 1,
                write advq1.active false,
                write adv1.active false,
                goto check,
                label i1,
                set b 1,
                write advq0.active false,
                write adv0.active false,
                label check,
                goto finish $(eq $(add $a $b $c) 2),
                return -1,
                label finish,
                set c $(add $c 1),
                return 0,
                )


    RINswitch[2]
        -> Classifier(0/$RAW_INsrcmac)
        -> Print -> [0]linkoklock

    ROUTswitch[2]
        -> Classifier(0/$RAW_OUTsrcmac)
        -> Print -> [1]linkoklock

    //-----------------

    linkok ->
    link_initialized :: Script(TYPE PACKET,
        print "Link initialized !",
        write RINswitch.switch -1,
        write RINswitch.switch -1,
        print "IN has $(NIN/nPacket.count) packets",
        print "OUT has $(NOUT/nPacket.count) packets",
        write RIN/chPacket.count $(NOUT/nPacket.count),
        write ROUT/chPacket.count $(NIN/nPacket.count),
            wait 1s,

        print "Starting replay...",

        write avgSIN.reset, write avgSOUT.reset, write avgRIN.reset, write avgROUT.reset,
        write RINswitch.switch 0 ,write ROUTswitch.switch 0,
        write replay.stop $replay_count,
        write replay.active true);


    RINswitch[1]->Print(LATEIN) -> Discard;
    ROUTswitch[1]->Print(LATEOUT) -> Discard;

}



d0 :: Dual(0,1, ${client:0:mac},${client:0:raw_mac},${client:1:mac},${client:1:raw_mac},
${server:0:mac},${server:0:raw_mac},${server:1:mac},${server:1:raw_mac}, ${client:0:ip}, ${client:1:ip}, 0)
d1 :: Dual(2,3, ${client:2:mac},${client:2:raw_mac},${client:3:mac},${client:3:raw_mac},
${server:2:mac},${server:2:raw_mac},${server:3:mac},${server:3:raw_mac}, ${client:2:ip}, ${client:3:ip}, 4)


DriverManager(pause, pause,
                goto waitagain $(eq $nolinktest 0),
                wait 4s,
                write d0/advq0.active false,
                write d0/adv0.active false,
                write d0/advq1.active false,
                write d0/adv1.active false,
                write d1/advq0.active false,
                write d1/adv0.active false,
                write d1/advq1.active false,
                write d1/adv1.active false,
                write d0/link_initialized.run,
                write d1/link_initialized.run,
                label waitagain,
                set starttime $(now),
                pause, pause,
                set stoptime $(now),
                print "Replay finished. Waiting for last packets for $wait seconds...",
                wait $wait,
                write d0/RINswitch.switch 1 , write d0/ROUTswitch.switch 1,
                write d1/RINswitch.switch 1 , write d1/ROUTswitch.switch 1,
                print "Checking if packets are still coming in..",
                wait 2s,
                print "Rate : ",
                print $(d0/avgSIN.link_rate),
                print $(d0/avgSOUT.link_rate),
                print $(d0/avgROUT.link_rate),
                print $(d0/avgRIN.link_rate),
                print "Count :",
                print $(d0/avgSIN.count),
                print $(d0/avgSOUT.count),
                print $(d0/avgROUT.count),
                print $(d0/avgRIN.count) $(d0/receiveIN.hw_count) $(d0/receiveIN.hw_dropped),
                print "Rate 2: ",
                print $(d1/avgSIN.link_rate),
                print $(d1/avgSOUT.link_rate),
                print $(d1/avgROUT.link_rate),
                print $(d1/avgRIN.link_rate),
                print "Count 2:",
                print $(d1/avgSIN.count),
                print $(d1/avgSOUT.count),
                print $(d1/avgROUT.count),
                print $(d1/avgRIN.count) $(d1/receiveIN.hw_count) $(d1/receiveIN.hw_dropped),
                print "RESULT-TESTTIME $(sub $stoptime $starttime)",
                print "RESULT-LATENCY $(div $(add $(d0/tsd.average) $(d1/tsd.average)) 2)",
                print "RESULT-RXTHROUGHPUT $(add $(d0/avgROUT.link_rate) $(d1/avgROUT.link_rate))",
                print "RESULT-TXTHROUGHPUT $(add $(d0/avgRIN.link_rate) $(d1/avgRIN.link_rate))",
                print "RESULT-THROUGHPUT $(add $(d0/avgROUT.link_rate) $(d1/avgROUT.link_rate) $(d0/avgRIN.link_rate) $(d1/avgRIN.link_rate))",
                print "Mean Delay: $(d0/tsd.average) $(d1/tsd.average) µs",
                print "Min Delay: $(tsd.min) µs",
                print "Max Delay: $(tsd.max) µs",
                print "Delay StdDev: $(tsd.stddev) µs",
                stop);

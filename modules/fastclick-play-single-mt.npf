%info
Module to replay a trace or a dump with throughput and latency measurement

Packets are directed towards one NIC of the "server" role using one NIC of the CLIENT and expect to receive packets back on any (eventyally the same) NIC. There is no L3 support (ARP).

Suggested usage example in your test (omit the prefixed "//" that prevent loop import here)

//%import@client fastclick-replay-single-mt trace=path/to.pcap NIC=0 CLIENT_NIC=0

Set GEN_DUMP=1 to use a FromIPSummaryDump instead of FromDump, the trace parameter should therefore follow the FromIPSummaryDump format. Similarly, use GEN_DUMP=2 to use FromMinDump.
To generate UDP packets, use GEN_DUMP=-1

The normal way to use multi-threading would be to round-robin the trace between the threads. Use the "GEN_MULTI_TRACE=1" to use multiple traces, using -1, -2, ... -GEN_THREADS suffixes to the trace.
If the tag scale_multi_trace is given, then the number of threads is fixed and the trace will be used from 1 to .. GEN_MULTI_TRACE. If GEN_MULTI_GEN is smaller than GEN_THREADS, some threads might be unused. This is useful to scale the number of threads.

Use the "gen_nolat" tag to disable latency tracking. This cannot be done using variables.

%config
n_retry=0
n_runs=1
require_tags=import
timeout=60
default_role_map+={server:dut}

%variables
PKTGEN_BURST_OUT=32
-udpgen:PKTGEN_REPLAY_COUNT=1
NIC=0
CLIENT_NIC=0
RCV_NIC=0
LIMIT=50000000
LIMIT_TIME=10
GEN_THRESHOLD=0
GEN_THREADS=4
GEN_RX_THREADS=4
GEN_PIPELINE=1
udpgen:GEN_PIPELINE=0
GEN_TX_PIPELINE=0
GEN_SOCKET=0
GEN_BURST=32
PROMISC=false
promisc:PROMISC=true
IGNORE?=0
GEN_PAUSE=none
GEN_DESC=0
GEN_CSUM=true
END_AFTER=0
GEN_PROGRESSIVE=0
progressive:GEN_PROGRESSIVE=1
rate,prate:GEN_RATE?=1000
GEN_RATE?=-1
LATENCYDUMP=/tmp/latency.csv
ITERATION_TIME?=0
iterative:ITERATION_TIME=1
GEN_MULTI_TRACE=0
GEN_FORCE_ETHER=0
trace_is_ip:GEN_FORCE_ETHER=1
GEN_DUMP=0
gen_dump:GEN_DUMP=1
gen_mindump:GEN_DUMP=2
udpgen:GEN_LENGTH=64
udpgen:GEN_DUMP=-1
GEN_SEQUENTIAL=1
GEN_RX=1
NUMBEROFFSET=40
gen_norx:GEN_RX=0
timing:TIMING=1
timing:TIMING_FNT=100
GEN_START_DELAY=5

%late_variables
GEN_NUMA?=false
PRELOAD?=0
GEN_TX_DESC?=EXPAND($GEN_DESC)
//The number of generator element such as FromDump or FastUDPSrc
GEN_NGEN=EXPAND( $((1 if $GEN_PIPELINE else $GEN_THREADS )) )
scale_multi_trace:GEN_NGEN=EXPAND( $GEN_MULTI_TRACE )
GEN_IPV6?=0
GEN_NANO?=0
GEN_PREFIX?=
GEN_FNT?=
DISTRIB?=Rated
UNQUEUE?=
udpgen:UNQUEUE=Unqueue()
rate:UNQUEUE=EXPAND( Bandwidth${DISTRIB}Unqueue( $(( int($GEN_RATE / $GEN_NGEN) )), EXTRA_LENGTH true, LINK_RATE true, BURST_DURATION 1, BURST $GEN_BURST) )
prate:UNQUEUE=EXPAND( ${DISTRIB}Unqueue($(( int($GEN_RATE / $GEN_NGEN)  )), BURST $GEN_BURST, ACTIVE $(( "false" if $GEN_PROGRESSIVE else "true" )) ) )
REPLAY=0
replay:REPLAY=1
replay,-timing:UNQUEUE=ReplayUnqueue(STOP -1, STOP_TIME {{LIMIT_TIME}}, QUICK_CLONE $quick, VERBOSE true, ACTIVE false, LIMIT {{ ( (LIMIT | int) / (GEN_NGEN | int) ) | int - 4096 }})
replay,timing:UNQUEUE=ReplayUnqueue(STOP -1, STOP_TIME {{LIMIT_TIME}}, QUICK_CLONE $quick, VERBOSE true, ACTIVE false, LIMIT {{ ( (LIMIT | int) / (GEN_NGEN | int) ) | int - 4096 }}, TIMING {{TIMING}}, TIMING_FNT {{TIMING_FNT}})
prate:HAVE_PRATE=1
HAVE_UNQUEUE?=0
udpgen,-prate|prate,-udpgen|rate|replay:HAVE_UNQUEUE=1
SAMPLE?=100
NRECORD=EXPAND( $(( int($LIMIT / $SAMPLE + 1024) * 2 )) )
BROADCAST_IGNORE= -> c :: Classifier(0/$mac,-) //Ignore broadcasts
GEN_NOREWRITE_ETHER?=0
TIMING?=false
GEN_BLOCKING?=true
GEN_FLOWSIZE?=EXPAND($GEN_BURST)
TIMING_FNT?=
DODUMP?=0
dump:DODUMP=1
DOLATVAL=0
latval:DOLATVAL=1
gdb:GEN_GDB=gdb -ex run -ex "signal 2" -ex "bt" -batch -args

gen_nolat:DOLAT=0
gen_nolat:GEN_TSDIFF=NoTimestampDiff
gen_nolat:GEN_NUMBER= -> check :: MarkIPHeader
gen_nolat:GEN_RECORD=
gen_nolat:GEN_MAGIC=EXPAND(-> magic :: {[0]-> RoundRobinSwitch(SPLITBATCH false)[0-$(( $GEN_THREADS - 1 ))] => [0-$(( $GEN_THREADS - 1 ))]output;Idle->[$GEN_THREADS]output;})
GEN_TSDIFF?=TimestampDiff
-gen_preped:GEN_NUMBER?=EXPAND( -> check :: MarkIPHeader  -> nPacket :: NumberPacket( $(( ${NUMBEROFFSET} + 2 )) ) -> StoreData(${NUMBEROFFSET}, $magic) )
GEN_RECORD?=EXPAND(-> rt :: RecordTimestamp(N $NRECORD, SAMPLE $SAMPLE, OFFSET $(( ${NUMBEROFFSET} + 14 + 2 )) ))
GEN_MAGIC?=EXPAND(    -> magic :: Classifier( $(( ", ".join([ "${NUMBEROFFSET}/57%02x" % t for t in range($GEN_THREADS) ]) )),  -);)
DOLAT?=1
FDDISPATCH=EXPAND( $((" rr :: RoundRobinSwitch(SPLITBATCH false);" if $GEN_THREADS > 1 and $GEN_PIPELINE else "rr :: MyNull;")) )
NBBUF?=200000
replay:NBBUF= {{ LIMIT  + 65536 }}

gen_preped:GEN_NUMBER= -> MarkIPHeader
gen_preped:FDDISPATCH?=  rr :: Classifier( 40/5741,  40/5722,    40/57E3,      40/5774);
gen_preped:FDDISPATCH=EXPAND( rr :: Classifier( $(( ", ".join([ "40/57%02x" % t for t in range($GEN_THREADS) ]) )),  -);)

//For UDP gen
GEN_FLOWS?=128


%prate,timing:require
echo "timing and prate are not compatible"
exit 1

%-rate:require
//test $GEN_RATE -eq -1 || ( echo "GEN_RATE can only be -1 (deactivated) when rate is not given" && exit 1)

%rate:require
test $GEN_RATE -gt 1 || ( echo "GEN_RATE must be > 0" && exit 1)

%promisc:late_variables
BROADCAST_IGNORE= -> c :: Classifier(-, 0/ffffffffffff)



%file launch.sh
proc=\$(( $(nproc --all) - 1 ))
if [ "$GEN_CPUS" = "" ] ; then
    GEN_CPUS=0-$proc
fi
$GEN_GDB click --dpdk -l $GEN_CPUS --file-prefix gen-$RCV_NIC -a ${self:$RCV_NIC:pci}  -- PKTGEN_CONFIG_${RCV_NIC} PREFIX=$GEN_PREFIX
echo "EVENT TX_FINISHED"
echo "Generator stopped..."

%gen_pipeline,-iqueue:script deps=fastclick-noiqueue-utime sudo=true delay=2 name=fastclick-play
bash launch.sh

%-gen_pipeline,-iqueue:script autokill=false criticial=true
if [ $GEN_PIPELINE -eq 0 -a $GEN_TX_PIPELINE -eq 0 ] ; then
    exit 0
else
    echo "WARNING: To use Pipelining you must pass the gen_pipeline tag $GEN_PIPELINE $GEN_TX_PIPELINE !"
    exit 1
fi


%-gen_pipeline,-iqueue:script deps=fastclick-noiqueue-utime-rtc sudo=true delay=2 name=fastclick-play
bash launch.sh

%iqueue:script deps=fastclick-utime sudo=true delay=2 name=fastclick-play
bash launch.sh

%file PKTGEN_CONFIG_${RCV_NIC} jinja
d :: DPDKInfo($NBBUF)

define($bout $PKTGEN_BURST_OUT)
define($INsrcmac ${client:$CLIENT_NIC:mac})
define($RAW_INsrcmac ${client:$CLIENT_NIC:raw_mac})

define($INdstmac ${server:$NIC:mac})
define($RAW_INdstmac ${server:$NIC:raw_mac})

define($ignore $IGNORE)
define($replay_count $PKTGEN_REPLAY_COUNT)
define($port 0)
define($quick true)
define($txverbose 99)
define($rxverbose 99)

elementclass MyNull {
{% if $GEN_NGEN > $GEN_THREADS %}
    {% for t in range($GEN_NGEN) %}
        [{{t}}]->[{{t % $GEN_THREADS}} ];
    {%endfor%}
{% elif $GEN_NGEN < $GEN_THREADS %}
    {% for t in range($GEN_NGEN) %}
        [{{t}}]->[{{t}} ];
    {%endfor%}
    {% for t in range($GEN_NGEN,$GEN_THREADS) %}
        Idle->[{{t}} ];
    {%endfor%}
{% else %}
    [0-$(( $GEN_NGEN - 1 ))]=>[0- $(($GEN_NGEN - 1)) ];
{% endif %}
};

JiffieClock()

{% for t in range(GEN_NGEN|int) %}
    {% if GEN_MULTI_TRACE %}
        {% set t_path=trace ~ "-" ~ (t+1) %}
    {% else %}
        {% set t_path=trace %}
    {% endif %}
    {% if GEN_DUMP==-1 %}
    //UDP-based
        {% if GEN_IPV6 %}
            fdIN{{ t }} :: FastUDPFlowsIP6(RATE 0, LIMIT -1, LENGTH $GEN_LENGTH, SRCETH $INsrcmac, DSTETH $INdstmac, SRCIP6 ${client:0:ip6}, DSTIP6 ${server:0:ip6}, FLOWS $GEN_FLOWS, FLOWSIZE $GEN_BURST, SEQUENTIAL $GEN_SEQUENTIAL)
        {% else %}
            fdIN{{ t }} :: $(( " FastUDPFlows(RATE " + ( str(int($GEN_RATE / $GEN_NGEN) ) if "$HAVE_PRATE" else "0") +  ", LIMIT " + str(int($LIMIT / $GEN_NGEN) if "$HAVE_PRATE" else "-1" ) + " , LENGTH $GEN_LENGTH, SRCETH $INsrcmac, DSTETH $INdstmac, SRCIP ${client:0:ip}, DSTIP ${server:0:ip}, FLOWS $GEN_FLOWS, FLOWSIZE $GEN_FLOWSIZE, SEQUENTIAL $GEN_SEQUENTIAL, BURST $GEN_BURST, ACTIVE false)" ))
        {% endif %}
    {% elif GEN_DUMP == 0 %}
        fdIN{{t}} :: FromDump({{t_path}}, STOP true, TIMING {{ $TIMING if not $REPLAY else 0 }}, TIMING_FNT "$TIMING_FNT", END_AFTER $END_AFTER, ACTIVE {{ REPLAY }}, BURST 32 {% if PRELOAD > 0 %}, PRELOAD $PRELOAD{% endif %} , MMAP false, DPDK true);
    {% elif GEN_DUMP == 1 %}
        fdIN{{t}} :: FromIPSummaryDump({{t_path}}, TIMES $replay_count, TIMING $TIMING, TIMESTAMP $TIMING, ZERO false, BURST $GEN_BURST, STOP true);
    {% else %}
        fdIN{{t}} :: FromMinDump({{t_path}}, TIMES $replay_count,  BURST $GEN_BURST, STOP , DPDK true);
    {% endif %}
{% endfor %}

tdIN ::
{% if GEN_TX_PIPELINE == 1 %}
    Pipeliner(CAPACITY 1024, ALWAYS_UP true) ->
{% elif GEN_TX_PIPELINE==2 %}
    PathSpinlock ->
{% else %}
    {[0] -> [0]} ->
{% endif %}
     realTD :: ToDPDKDevice($port, BLOCKING $GEN_BLOCKING, BURST $bout, VERBOSE $txverbose, IQUEUE $bout, NDESC $GEN_TX_DESC, IPCO $GEN_CSUM )



elementclass NoTimestampDiff { $a, $b, $c, $d, $e |
input -> output;
Idle->[1]output;
}

elementclass DuplicateRewrite {
    exit :: MinBatch(2) -> output;
    [0]
    -> EnsureDPDKBuffer
    //-> MarkIPHeader(OFFSET 14) -> IPPrint(IN)
//    -> Print
    -> t :: Duplicate;

    t[1]
    //-> IPPrint(B)
    -> exit;
    t[0] -> Strip(14) -> MarkIPHeader(OFFSET 0)
    //-> IPPrint(ABefore) -> Print
    -> ipc :: IPClassifier(src net 2.0.0.0/8,dst net 2.0.0.0/8, -);

    out :: Unstrip(14)
    //-> IPPrint(A)
    -> exit;
    ipc[0] -> StoreData(OFFSET 12, DATA \<03>) -> out;
    ipc[1] -> StoreData(OFFSET 16, DATA \<03>) -> out;
    ipc[2] -> IPPrint("Unexpected, neither internal or external", ACTIVE true) -> Discard;
}

elementclass Numberise { $magic |
    input-> Strip(14)
    $GEN_NUMBER
    $GEN_FNT
$(( "" if $GEN_IPV6 and $GEN_CSUM else " -> ResetIPChecksum()  " ))
    -> Unstrip(14) -> output
}

ender :: Script(TYPE PASSIVE,
                print "Limit of $LIMIT reached",
                stop,
                stop);
$FDDISPATCH

{% for t in range(GEN_NGEN | int ) %}
     fdIN{{t}}
    {% if LIMIT > 0 and not "$HAVE_PRATE"  %}
         -> limit{{t}} :: Counter(COUNT_CALL {{ ( (LIMIT | int) / (GEN_NGEN | int) )  | int }} ender.run)
    {% endif %}
    {% if HAVE_UNQUEUE %}
        -> unqueue{{t}} :: $UNQUEUE
    {% endif %}
     -> [{{t}}]rr;
{% endfor %}

elementclass Generator { $magic |
input
 $(( " -> replay :: Pipeliner(BLOCKING "+("true" if $GEN_THREADS == 1 else "false")+", CAPACITY 1024, ALWAYS_UP true)" if $GEN_PIPELINE else ""))
  -> MarkMACHeader
$(( "-> EnsureDPDKBuffer" if $GEN_DUMP < 2 else "" ))
  $(( "  -> doethRewrite :: { input[0] -> active::Switch(OUTPUT $GEN_NOREWRITE_ETHER)[0] -> rwIN :: EtherRewrite($INsrcmac,$INdstmac) -> [0]output;   active[1] -> [0]output}" if  $GEN_DUMP <= 0 and $GEN_FORCE_ETHER == 0 else "-> EtherEncap(0x0800, $INsrcmac, $INdstmac)" ))
$(( "-> Pad " if $GEN_DUMP < 2 and $GEN_DUMP > -1 else "" ))
  -> Numberise($magic)
  -> avgSIN :: AverageCounterIMP(IGNORE $ignore, THRESHOLD $GEN_THRESHOLD)
  $GEN_RECORD
  -> output;
}

{% for t in range($GEN_THREADS|int) %}

    {% set thread=(t%GEN_THREADS + 1) %}

    rr[{{t}}] -> gen{{t}} :: Generator(\<57{{ "%02x" % t  }}>) -> tdIN;
    {% if GEN_PIPELINE %}
        StaticThreadSched(gen{{t}}/replay ${GEN_SOCKET}/{{thread}});
        StaticThreadSched(fdIN0 0/0, unqueue0 0/0);
    {% else %}
        {% if t < $GEN_NGEN %}
            StaticThreadSched(fdIN{{t}} ${GEN_SOCKET}/{{thread}});
            {% if HAVE_UNQUEUE %}
                StaticThreadSched(unqueue{{t}} ${GEN_SOCKET}/{{thread}});
            {% endif %}
        {% endif %}
    {% endif %}
{% endfor %}
{% for t in range($GEN_THREADS,$GEN_NGEN) %}

            {% set thread=(t%GEN_THREADS + 1) %}
            StaticThreadSched(fdIN{{t}} ${GEN_SOCKET}/{{thread}});
            {% if HAVE_UNQUEUE %}
                StaticThreadSched(unqueue{{t}} ${GEN_SOCKET}/{{thread}});
            {% endif %}
{% endfor %}


$(( " StaticThreadSched(tdIN 0/%d);" % ($GEN_THREADS + 1) if $GEN_TX_PIPELINE else "" ))

receiveIN :: FromDPDKDevice($port, VERBOSE $rxverbose, MAC $INsrcmac, PROMISC $PROMISC, PAUSE $GEN_PAUSE, NDESC $GEN_DESC, MAXTHREADS $GEN_RX_THREADS, NUMA $GEN_NUMA, ACTIVE $GEN_RX)

elementclass Receiver { $mac, $dir |
    input[0]
$BROADCAST_IGNORE
    -> Strip(14)
//    -> $(( "CheckIP6Header()" if $GEN_IPV6 else "CheckIPHeader(CHECKSUM false)" ))

$GEN_MAGIC

    c[1] //Not for this computer or broadcasts
    -> Discard;

$((  "\n".join([ "magic[%d] -> tsd%d :: $GEN_TSDIFF(gen%d/rt, OFFSET %d, N $NRECORD, SAMPLE $SAMPLE, NANO $GEN_NANO ) -> Unstrip(14) ->  avg%d :: AverageCounterIMP(IGNORE $ignore) -> Discard;  tsd%d[1] -> Print('WARNING: Untimestamped packet on thread %d', 64) -> Discard;" % (t,t,t,${NUMBEROFFSET} + 2,t,t,t) for t in range($GEN_THREADS) ]) ))


$(( (  "avg :: HandlerAggregate( " + ",".join(["ELEMENT avg%d" % (i) for i in range($GEN_THREADS) ]) + " );" ) if 1 else "" ))

    magic[$GEN_THREADS]
    -> Unstrip(14)
    -> Print("WARNING: Unknown magic / untimestamped packet", -1)
    -> Discard;


}

ig :: Script(TYPE ACTIVE,
    goto end $(eq $ITERATION_TIME 0),
    set s $(now),
    set lastcount 0,
    set lastbytes 0,
    set lastbytessent 0,
    set lastsent 0,
    set lastdrop 0,
    set last $s,
    set indexA 0,
    set indexB 0,
    set indexC 0,
    set indexD 0,
    label loop,
    wait ${ITERATION_TIME}s,
    set n $(now), 
    set t $(sub $n $s),
    set elapsed $(sub $n $last),
    set last $n,

                set count $(RIN/avg.add count),
                set sent $(avgSIN.add count),
                set bytessent $(avgSIN.add byte_count),
                set bytes $(RIN/avg.add byte_count),
                print "IG-$t-RESULT-${PREFIX}IGSENT $(sub $sent $lastsent)",
                print "IG-$t-RESULT-${PREFIX}IGBYTESSENT $(sub $bytessent $lastbytessent)",
                set drop $(sub $sent $count),
                set lastdrop $drop,
{% if GEN_RX %}
                print "IG-$t-RESULT-${PREFIX}IGCOUNT $(sub $count $lastcount)",
                print "IG-$t-RESULT-${PREFIX}IGDROPPED $(sub $drop $lastdrop)",
                print "IG-$t-RESULT-${PREFIX}IGTHROUGHPUT $(div $(mul $(add $(mul $(sub $count $lastcount) 24) $(sub $bytes $lastbytes)) 8) $elapsed)",
{% endif %}
                goto next $(eq $DOLAT 0),
//                print "IG-$t-RESULT-${PREFIX}ILAT01 $(RIN/tsd0.perc01 $indexA)",
//                print "IG-$t-RESULT-${PREFIX}ILAT50 $(RIN/tsd0.median $indexA)",
                print "IG-$t-RESULT-${PREFIX}ILATENCY $(RIN/tsd0.average $indexA)",
                print "IG-$t-RESULT-${PREFIX}ILAT99 $(RIN/tsd0.perc99 $indexA)",
                set indexA $(RIN/tsd0.index),
                label next,
                set lastcount $count,
                set lastsent $sent,
                set lastbytes $bytes,
                set lastbytessent $bytessent,
    goto loop,
    label end
)

StaticThreadSched(ig -1);

receiveIN -> RIN :: Receiver($RAW_INsrcmac,"IN");

$(( (  "tsd :: HandlerAggregate( " + ",".join(["ELEMENT RIN/tsd%d" % (i) for i in range($GEN_THREADS) ]) + " );" ) if $DOLAT else "" ))

$(( "avgSIN :: HandlerAggregate( " + ",".join(["ELEMENT gen%d/avgSIN" % (i) for i in range($GEN_THREADS) ]) + " );" ))


starter :: Script(TYPE PASSIVE,
			$(( "\n".join([ "print 'Thread %d started', write unqueue%d.active true, wait 100ms," % (i,i) for i in range($GEN_THREADS) ])  )) 
);
dm :: DriverManager(  print "Waiting ${GEN_START_DELAY} seconds before launching generation...",
                wait ${GEN_START_DELAY}s,

                print "EVENT GEN_BEGIN",
                print "Starting gen...",
        {% for t in range($GEN_NGEN) %}
                 write fdIN{{ t }}.active true,
           {% if HAVE_UNQUEUE %}
                write unqueue{{t}}.active true,
            {% endif %}
        {% endfor %}
		$(( "write starter.run," if $GEN_PROGRESSIVE else "" ))
                print "Starting timer wait...",
                set starttime $(now),
                wait $LIMIT_TIME,
//                write fdIN.active 0,
                set stoptime $(now),
                print "EVENT GEN_DONE",
                wait 1s,
                read receiveIN.hw_count,
                read receiveIN.count,
                read receiveIN.xstats,
                goto alatval $(eq $DOLAT 0),
                goto adump $(eq $DODUMP 0),
/*                print "Dumping latency samples to $LATENCYDUMP",
                print >$LATENCYDUMP $(RIN/tsdA.dump_list),
                print >>$LATENCYDUMP $(RIN/tsdB.dump_list),
                print >>$LATENCYDUMP $(RIN/tsdC.dump_list),
                print >>$LATENCYDUMP $(RIN/tsdD.dump_list),*/
                label adump,

                print "RESULT-${PREFIX}LATENCY $(tsd.avg average)",
                print "RESULT-${PREFIX}LAT00 $(tsd.avg min)",
                print "RESULT-${PREFIX}LAT01 $(tsd.avg perc01)",
                print "RESULT-${PREFIX}LAT50 $(tsd.avg median)",
                print "RESULT-${PREFIX}LAT95 $(tsd.avg perc95)",
                print "RESULT-${PREFIX}LAT99 $(tsd.avg perc99)",
                print "RESULT-${PREFIX}LAT999 $(tsd.avg perc 99.9)",
                print "RESULT-${PREFIX}LAT100 $(tsd.avg max)",
                goto alatval $(eq ${DOLATVAL} 0),
                set i 0,
                set step 1,
                label perc,
                print "CDFLATVAL-$(tsd.avg perc $i)-RESULT-${PREFIX}CDFLATPC $(div $i 100.0)",
                set i $(add $i $step),
                set step $(if $(ge $i 99) 0.1 1),
                goto perc $(le $i 100.0),
                label alatval,
                print "RESULT-${PREFIX}TESTTIME $(sub $stoptime $starttime)",
                set sent $(avgSIN.add count),
                set count $(RIN/avg.add count),
                set bytes $(RIN/avg.add byte_count),
{% if GEN_RX %}
                print "RESULT-${PREFIX}RCVTIME $(RIN/avg.avg time)",
                print "RESULT-${PREFIX}THROUGHPUT $(RIN/avg.add link_rate)", 
                print "RESULT-${PREFIX}COUNT $count",
                print "RESULT-${PREFIX}BYTES $bytes",
                print "RESULT-${PREFIX}DROPPED $(sub $sent $count)",
                print "RESULT-${PREFIX}DROPPEDPC $(div $(sub $sent $count) $sent)",
                print "RESULT-${PREFIX}DROPPEDPS $(div $(sub $sent $count) $(RIN/avg.avg time))",
                print "RESULT-${PREFIX}PPS $(RIN/avg.add rate)",
{% endif %}
                print "RESULT-${PREFIX}SENT $sent",
                print "RESULT-${PREFIX}TX $(avgSIN.add link_rate)",
                print "RESULT-${PREFIX}TXPPS $(avgSIN.add rate)",
                print "EVENT GEN_POST",
                stop);

StaticThreadSched(dm -1);

%info
Module generate traffic using FastClick with throughput and latency measurement

This module supports generating UDP traffic or playing a PCAP.

Both can generate at a given rate (UDP) or acceleration factor (PCAP).
Both can also use a "replay" mode, that is preloading packet in memory then replaying them in loop.

Packets are directed towards one NIC of the "server" role using one NIC of the CLIENT and expect to receive packets back on any (eventually the same) NIC.

There is no L3 support (ARP). MAC adresses must be set correctly.

# Usage

Add in your NPF test script (omit the prefixed "//" that prevent loop import here)

//%import@client fastclick-play-single-mt

## Playing a trace
Be sure to pass the variable trace=path/to/trace
The variable LIMIT_TIME will limit the replay time.


## Playing UDP traffic
Give the tag "udpgen" with --tags udpgen to npf cmdline
The variable GEN_LENGTH=128 allows to set the packet size to 128 bytes. Check the variables section below for other parameters.
The variable LIMIT_TIME will limit the replay time.

## Preloading in memory
Give the "replay" tag with --tags replay to npf cmdline
The variable PKTGEN_REPLAY_COUNT=10 will replay 10 times.
The variable LIMIT_TIME will limit the replay time instead.

## Packet or bit rate (UDP or trace)
Pass the "rate" tag to express a rate in BPS, "prate" for a rate in PPS
Then set GEN_RATE to define the rate

## Timing acceleration (traces, replayed or not)
Use TIMING=0 to play as fast possible the packets (you might consider preloading in memory, see below).
Use TIMING=1 to play packets using the original timing, eventually tweaked at X% of the original timing using TIMING_FNT.
For instance TIMING_FNT=200 will replay twice faster. TIMING_FNT can be a function of time (given as x). For instance to start replay at 1% at t=0 then 100% at t=10 and then stay at 100%:
TIMING_FNT=1+min(99,x*10)

Arrange the function so the timing is never 0%. At 0% the system will be unscheduled, as the timing is computed for inter-packet time. At 0%, the next packet is never sent so the time stops.

## Replaying from compressed dump (particular cases)
Set GEN_DUMP=1 to use a FromIPSummaryDump instead of FromDump, the trace parameter should therefore follow the FromIPSummaryDump format. Similarly, use GEN_DUMP=2 to use FromMinDump.

# Zero-loss throughput
Altough not tied to this specific module, it is often combined with experimental design to find the zero-loss-throughput. The following cmdline arguments will give the maximum rate a DUT can forward.

--variables GEN_RATE=[1000000-16000000#1000000]
--exp-design zlt(GEN_RATE,PPS,1.01)

# Multi-threading

Pass the variables GEN_THREADS=X and GEN_RX_THREADS=y to use x threads for TX and y threads for RX. Default is 4 for both.

## Multi-threading with traces
The normal way to use multi-threading would be to round-robin the trace between the threads.

By default, each thread will re-read the same trace, which is generally not convenient.

A more efficient way is to use multiple traces pre-split, for instance one trace per thread.
Use the "GEN_MULTI_TRACE=N" tag to use multiple traces, using -1, -2, ... -N suffixes to the trace. If you only have 4 threads (GEN_THREADS=4), then only traces from 1 to 4 will be used. Inversely, if you have 4 threads but only two traces, the threads 3 and 4 will fail.

If the tag scale_multi_trace tag is given, then the number of traces is fixed always sending traces from 1 to .. GEN_MULTI_TRACE. If GEN_MULTI_TRACE is smaller than GEN_THREADS, some threads will be unused. If GEN_MULTI_TRACE is bigger than the number of threads, then they will be distributed in a round-robin fashion. For instance with 16 traces and 4 threads, the first thread will send trace 1,5,9 and 13. This tags therefore ensure there is no mismatch between the numbers of traces and thread.


## Deactivate latency to improve performance
Use the "gen_nolat" tag to disable latency tracking. This cannot be done using variables.

## Deactivate packet receiption
Use the gen_norx tag to disable receiving packets. This will leave CPU resources available for sending.

## Notes on pipeline

The script has a pipelined mode (use gen_pipeline tag which will set GEN_PIPELINE to 1) used to ensure only one thread reads from the generator (packet trace, UDP, mindump, etc...). The best option is to pre-split a trace, or use UDP generation that can natively be multi-threaded. Use this as last resort or if you got enough performance wihout the hassle of splitting the trace.

%config
n_retry=0
n_runs=1
require_tags=import
timeout=60
default_role_map+={server:dut}

%variables

//Number of packet to generate in a burst trade latency accuracy (1) for speed (32)
PKTGEN_BURST_OUT=32

//Number of time to replay a trace. Not applicable to UDP
PKTGEN_REPLAY_COUNT=1

//NICs to be used. Deprecated, one should use the NIC specification through the cluster argument and leave 0 here
NIC=0
CLIENT_NIC=0
RCV_NIC=0

//Maximum number of packets to read
LIMIT=50000000
replay:LIMIT=1000000

//Maximum time to (re)play
LIMIT_TIME=10

//Do not start measuring latency before reaching that amount of packets per second. Avoids starting computing latency when we receive a random ICMP packets from the switch or something like that
GEN_THRESHOLD=0
//Similarly, we can IGNORE the measurement for the X first seconds after the first packet is received.
IGNORE?=0

//Number of threads
GEN_THREADS=4
GEN_RX_THREADS=4
GEN_PIPELINE=0
//udpgen|gen_multi_trace|replay|scale_multi_trace:GEN_PIPELINE=0
gen_pipeline:GEN_PIPELINE=1
GEN_TX_PIPELINE=0
gen_tx_pipeline:GEN_TX_PIPELINE=1

//Socket of the NIC
GEN_SOCKET=0

//Maximum amount of packets to read from the NIC
GEN_BURST=32

//Promiscuous mode?
PROMISC=false
promisc:PROMISC=true

//Disable pause frame, set to unset with intel NICs that does not support it
GEN_PAUSE=none

//Number of descriptor, use NIC default with 0
GEN_DESC=0

//Enable offloaded checksum fixing
GEN_CSUM=true

//Stop reading traces after Xs
END_AFTER=0

//Packet or bitrate, depending on the tag
rate,prate:GEN_RATE?=1000
GEN_RATE?=-1
GEN_RATE_LINK?=1

//File where to dump the individual latency of all packets
LATENCYDUMP=/tmp/latency.csv

//Iterative mode
ITERATION_TIME?=0
iterative:ITERATION_TIME=1

//Use multiple trace (for multi-threading, see above)
GEN_MULTI_TRACE=0
gen_multi_trace:GEN_MULTI_TRACE=1

//Force ethernet encapsulation
GEN_FORCE_ETHER=0
trace_is_ip:GEN_FORCE_ETHER=1

//Packet generation mode, use tags instead of tweaking this
GEN_DUMP=0
gen_dump:GEN_DUMP=1
gen_mindump:GEN_DUMP=2
udpgen:GEN_LENGTH=64
udpgen:GEN_DUMP=-1

//Generate sequential UDP ports instead of random. This is actually much faster.
GEN_SEQUENTIAL=1

//Enable RX
GEN_RX=1
gen_norx:GEN_RX=0

//Timing
timing:TIMING=1
timing:TIMING_FNT=100

//Delay trace start
GEN_START_DELAY=5

//Where to put the latency record in the packet
NUMBEROFFSET=40

%late_variables
GEN_ACTIVEDELAY?=0
GEN_JIFFIECLOCK?=1
GEN_DEBUG?=0
GEN_NUMA?=false
PRELOAD?=0
GEN_TX_DESC?=EXPAND($GEN_DESC)
//The number of generator element such as FromDump or FastUDPSrc
GEN_NGEN=EXPAND( $((1 if $GEN_PIPELINE else $GEN_THREADS )) )
scale_multi_trace:GEN_NGEN=EXPAND( $GEN_MULTI_TRACE )
GEN_IPV6?=0
GEN_NANO?=0
GEN_PREFIX?=
GEN_FNT?=
DISTRIB?=Rated
UNQUEUE?=
udpgen,-replay:UNQUEUE=Unqueue()
rate:UNQUEUE=EXPAND( Bandwidth${DISTRIB}Unqueue( $(( int($GEN_RATE / $GEN_NGEN) )), EXTRA_LENGTH true, LINK_RATE $GEN_RATE_LINK, BURST_DURATION 1, BURST $GEN_BURST) )
prate:UNQUEUE=EXPAND( ${DISTRIB}Unqueue($(( int($GEN_RATE / $GEN_NGEN)  )), BURST $GEN_BURST, ACTIVE $(( "false" if $GEN_ACTIVEDELAY > 0 else "true" )) ) )
REPLAY=0
replay:REPLAY=1
HAVE_PRATE?=0
prate:HAVE_PRATE=1
HAVE_UNQUEUE?=0
udpgen,-prate,-replay|prate,-udpgen|rate:HAVE_UNQUEUE=1
SAMPLE?=100
NRECORD=EXPAND( $(( int($LIMIT * $PKTGEN_REPLAY_COUNT / $SAMPLE + 1024) * 2 )) )
BROADCAST_IGNORE= -> c :: Classifier(0/$mac,-) //Ignore broadcasts
GEN_NOREWRITE_ETHER?=0
TIMING?=0
GEN_BLOCKING?=true
GEN_FLOWSIZE?=EXPAND($GEN_BURST)
TIMING_FNT?=
DODUMP?=0
dump:DODUMP=1
DOLATVAL=0
latval:DOLATVAL=1

gdb:GEN_GDB=gdb -ex run -ex "signal 2" -ex "bt" -batch -args

gen_nolat:DOLAT=0
gen_nolat:GEN_TSDIFF=NoTimestampDiff
gen_nolat:GEN_NUMBER= -> check :: MarkIPHeader
gen_nolat:GEN_RECORD=
gen_nolat:GEN_MAGIC=EXPAND(-> magic :: {[0]-> RoundRobinSwitch(SPLITBATCH false)[0-$(( $GEN_THREADS - 1 ))] => [0-$(( $GEN_THREADS - 1 ))]output;Idle->[$GEN_THREADS]output;})
GEN_TSDIFF?=TimestampDiff
-gen_preped:GEN_NUMBER?=EXPAND( -> check :: MarkIPHeader  -> nPacket :: NumberPacket( $(( ${NUMBEROFFSET} + 2 )) ) -> StoreData(${NUMBEROFFSET}, $magic) )
GEN_RECORD?=EXPAND(-> rt :: RecordTimestamp(N $NRECORD, SAMPLE $SAMPLE, OFFSET $(( ${NUMBEROFFSET} + 14 + 2 )) ))
GEN_MAGIC?=EXPAND(    -> magic :: Classifier( $(( ", ".join([ "${NUMBEROFFSET}/57%02x" % t for t in range($GEN_THREADS) ]) )),  -);)
DOLAT?=1
FDDISPATCH=EXPAND( $((" rr :: RoundRobinSwitch(SPLITBATCH false);" if $GEN_THREADS > 1 and $GEN_PIPELINE else "rr :: MyNull;")) )

NBBUF?=200000
replay:NBBUF= {{ LIMIT  + 65536 }}

gen_preped:GEN_NUMBER= -> MarkIPHeader
gen_preped:FDDISPATCH?=  rr :: Classifier( 40/5741,  40/5722,    40/57E3,      40/5774);
gen_preped:FDDISPATCH=EXPAND( rr :: Classifier( $(( ", ".join([ "40/57%02x" % t for t in range($GEN_THREADS) ]) )),  -);)

//For UDP gen
GEN_FLOWS?=128

PREFIX?=

GEN_OVERWRITE_NIC?=
GEN_MAX_QUEUES?=

%prate,timing:require
echo "timing and prate are not compatible"
exit 1

%-rate:require
//test $GEN_RATE -eq -1 || ( echo "GEN_RATE can only be -1 (deactivated) when rate is not given" && exit 1)

%rate:require
test $GEN_RATE -gt 1 || ( echo "GEN_RATE must be > 0" && exit 1)

%promisc:late_variables
BROADCAST_IGNORE= -> c :: Classifier(-, 0/ffffffffffff)

%-udpgen,-replay:require
if [ "$trace" = "" ] ; then
    echo "You must either set the udpgen tag or set a trace"
    exit 1
fi

%file launch.sh jinja
proc=$(getconf _NPROCESSORS_ONLN)

if [ $? -ne 0 ] ; then
    //Backup only as this returns also offline cpus
    proc=$(nproc --all)
fi
proc=\$(( $proc - 1 ))
if [ "$GEN_CPUS" = "" ] ; then
    GEN_CPUS=0-$proc
fi
echo "Launching Click generator with $GEN_CPUS cpus"
$GEN_GDB click --dpdk -l $GEN_CPUS --file-prefix gen-$RCV_NIC {% if GEN_OVERWRITE_NIC %}{{GEN_OVERWRITE_NIC}}{%else%}-a ${self:$RCV_NIC:pci}{%endif%}  -- PKTGEN_CONFIG_${RCV_NIC} PREFIX=$GEN_PREFIX
echo "EVENT TX_FINISHED"
echo "Generator stopped..."

%gen_pipeline,-iqueue,-gen_nosudo|gen_tx_pipeline,-iqueue,-gen_nosudo:script deps=fastclick-noiqueue-utime sudo=true delay=2 name=fastclick-play
bash launch.sh


%gen_nosudo:script deps=fastclick-utime delay=2 name=fastclick-play
bash launch.sh

%-gen_pipeline,-gen_tx_pipeline,-iqueue,-gen_nosudo:script autokill=false criticial=true
if [ $GEN_PIPELINE -eq 0 -a $GEN_TX_PIPELINE -eq 0 ] ; then
    exit 0
else
    echo "WARNING: To use Pipelining you must pass the gen_pipeline tag (GEN_PIPELINE is $GEN_PIPELINE, GEN_TX_PIPELINE is $GEN_TX_PIPELINE) !"
    exit 1
fi


%-gen_pipeline,-gen_tx_pipeline,-iqueue,-gen_nosudo:script deps=fastclick-noiqueue-utime-rtc sudo=true delay=2 name=fastclick-play
bash launch.sh

%iqueue,-gen_nosudo:script deps=fastclick-utime sudo=true delay=2 name=fastclick-play
bash launch.sh

%file PKTGEN_CONFIG_${RCV_NIC} jinja
d :: DPDKInfo($NBBUF)

define($bout $PKTGEN_BURST_OUT)
define($INsrcmac ${client:$CLIENT_NIC:mac})
define($RAW_INsrcmac ${client:$CLIENT_NIC:raw_mac})

define($INdstmac ${server:$NIC:mac})
define($RAW_INdstmac ${server:$NIC:raw_mac})

define($ignore $IGNORE)
define($replay_count $PKTGEN_REPLAY_COUNT)
define($port 0)
define($quick true)
define($txverbose 99)
define($rxverbose 99)

elementclass MyNull {
{% if $GEN_NGEN > $GEN_THREADS %}
    {% for t in range($GEN_NGEN) %}
        [{{t}}]->[{{t % $GEN_THREADS}} ];
    {%endfor%}
{% elif $GEN_NGEN < $GEN_THREADS %}
    {% for t in range($GEN_NGEN) %}
        [{{t}}]->[{{t}} ];
    {%endfor%}
    {% for t in range($GEN_NGEN,$GEN_THREADS) %}
        Idle->[{{t}} ];
    {%endfor%}
{% else %}
    [0-$(( $GEN_NGEN - 1 ))]=>[0- $(($GEN_NGEN - 1)) ];
{% endif %}
};

{% if GEN_JIFFIECLOCK %}
jc :: JiffieClock(VERBOSE true)
StaticThreadSched(jc -1);
{% endif %}

{% if (GEN_NGEN|int) > 1 and REPLAY and GEN_DUMP>=0 and (GEN_MULTI_TRACE|int) == 0 %}
    Script(TYPE ACTIVE, print "WARNING: You have multiple readers threads reading from the same file. Set gen_pipeline, or user scale_multi_trace. Check the documentation of fastclick-play-single-mt.npf.");
{% endif %}
{% for t in range(GEN_NGEN|int) %}
    {% if GEN_MULTI_TRACE %}
        {% set t_path=trace ~ "-" ~ (t+1) %}
    {% else %}
        {% set t_path=trace %}
    {% endif %}
    {% if GEN_DUMP==-1 %}
    //UDP-based
        {% if GEN_IPV6 %}
            fdIN{{ t }} :: FastUDPFlowsIP6(
                            RATE 0,
                            LIMIT -1, LENGTH $GEN_LENGTH, SRCETH $INsrcmac, DSTETH $INdstmac, SRCIP6 ${client:0:ip6}, DSTIP6 ${server:0:ip6}, FLOWS $GEN_FLOWS, FLOWSIZE $GEN_BURST, SEQUENTIAL $GEN_SEQUENTIAL)
        {% else %}
            fdIN{{ t }} :: FastUDPFlows(
                            RATE {% if HAVE_PRATE %}{{($GEN_RATE / $GEN_NGEN) | int }}{%else%}0{%endif%},
                            LIMIT {% if HAVE_PRATE %}{{($LIMIT / $GEN_NGEN) | int }}{%else%}-1{%endif%},
                            LENGTH $GEN_LENGTH, SRCETH $INsrcmac, DSTETH $INdstmac, SRCIP ${client:0:ip}, DSTIP ${server:0:ip},
                            FLOWS $GEN_FLOWS, FLOWSIZE $GEN_FLOWSIZE,
                            STOP true,
                            SEQUENTIAL $GEN_SEQUENTIAL, BURST $GEN_BURST, ACTIVE false)
        {% endif %}
    {% elif GEN_DUMP == 0 %}
        fdIN{{t}} :: FromDump({{t_path}}, STOP true, TIMING {{ $TIMING if not $REPLAY else 0 }}, {% if not $REPLAY %} TIMING_FNT "$TIMING_FNT", {% endif %} END_AFTER $END_AFTER, ACTIVE {{ "true" if (REPLAY and not GEN_ACTIVEDELAY) else "false" }}, BURST 32 {% if PRELOAD > 0 %}, PRELOAD $PRELOAD{% endif %} , MMAP false, DPDK true);
    {% elif GEN_DUMP == 1 %}
        fdIN{{t}} :: FromIPSummaryDump({{t_path}}, TIMES $replay_count, TIMING $TIMING, TIMESTAMP $TIMING, ZERO false, BURST $GEN_BURST, STOP true);
    {% else %}
        fdIN{{t}} :: FromMinDump({{t_path}}, TIMES $replay_count,  BURST $GEN_BURST, STOP true, DPDK true);
    {% endif %}
{% endfor %}

tdIN ::
{% if GEN_TX_PIPELINE == 1 %}
    Pipeliner(CAPACITY 1024, ALWAYS_UP true) ->
{% elif GEN_TX_PIPELINE==2 %}
    PathSpinlock ->
{% else %}
    {[0] -> [0]} ->
{% endif %}

     realTD :: ToDPDKDevice($port, BLOCKING $GEN_BLOCKING, BURST $bout, VERBOSE $txverbose, IQUEUE $bout, NDESC $GEN_TX_DESC, IPCO $GEN_CSUM {% if GEN_MAX_QUEUES %}, MAXQUEUES {{GEN_MAX_QUEUES}}{% endif %})



elementclass NoTimestampDiff { $a, $b, $c, $d, $e |
    input -> output;
    Idle->[1]output;
}

// Might be used by external script to shift ports on the flight
elementclass PortShift {
    input -> pc :: IPClassifier(src port < 1024,dst port < 1024,-);
    pc[0] -> Shifter(0,0,0,371) -> output;
    pc[1] -> Shifter(0,371,0,0) -> output;
    pc[2] -> output;
}

// Might be used by external script to duplicate packets on the flight
elementclass DuplicateRewrite {
    exit :: MinBatch(2) -> output;
    [0]
    -> EnsureDPDKBuffer
    -> t :: Duplicate;

    t[1]
    -> exit;
    t[0] -> Strip(14) -> MarkIPHeader(OFFSET 0)
    -> ipc :: IPClassifier(src net 2.0.0.0/8,dst net 2.0.0.0/8, -);

    out :: Unstrip(14)
    -> exit;
    ipc[0] -> Shifter(0,0,1572864,0) -> PortShift -> out;
    ipc[1] -> Shifter(1572864,0,0,0) -> PortShift -> out;
    ipc[2] -> IPPrint("Unexpected, neither internal or external", ACTIVE true) -> Discard;
}

elementclass Numberise { $magic |
    input-> Strip(14)
    $GEN_NUMBER
    $GEN_FNT
$(( "" if $GEN_IPV6 and $GEN_CSUM else " -> ResetIPChecksum()  " ))
    -> Unstrip(14) -> output
}

ender :: Script(TYPE PASSIVE,
                print "Limit of $LIMIT reached",
                {% for t in range($GEN_NGEN) %}
                write fdIN{{ t }}.active false,
                {% endfor %}
                stop);
$FDDISPATCH

{% for t in range(GEN_NGEN | int ) %}
     fdIN{{t}}
    {% if (LIMIT | int) > 0 and not HAVE_PRATE %}
         -> limit{{t}} :: Counter(COUNT_CALL {{ ( (LIMIT | int) / (GEN_NGEN | int) )  | int }} ender.run)
    {% endif %}
    {% if HAVE_UNQUEUE %}
        -> unqueue{{t}} :: $UNQUEUE
    {% endif %}
     -> [{{t}}]rr;
{% endfor %}

elementclass Generator { $magic |
input
 $(( " -> replay :: Pipeliner(BLOCKING "+("true" if $GEN_THREADS == 1 else "false")+", CAPACITY 1024, ALWAYS_UP true)" if $GEN_PIPELINE and not $REPLAY else ""))
  -> MarkMACHeader
$(( "-> EnsureDPDKBuffer" if $GEN_DUMP < 2 else "" ))

{% if GEN_DUMP > 0 or GEN_FORCE_ETHER != 1 %}
    ->  EtherEncap(0x0800, $INsrcmac, $INdstmac)
{% elif GEN_NOREWRITE_ETHER == 0 %}
    {% if not REPLAY %}
    -> { [0] -> cverif :: Classifier(12/0800,12/86DD,12/0806, -)[0-2] => [0]; cverif[3] -> Print("Packet is not IP, ARP or IP6?") -> [0]; }
    {% endif %}
    -> rwIN :: EtherRewrite($INsrcmac,$INdstmac)
{% endif %}

{% if GEN_DUMP < 2 and GEN_DUMP > -1 %}
    -> Pad
{% endif %}
    -> Numberise($magic)
{% if REPLAY %}
    -> replay :: ReplayUnqueue(STOP {{PKTGEN_REPLAY_COUNT}}, STOP_TIME {{LIMIT_TIME}}, QUICK_CLONE $quick, VERBOSE true, ACTIVE false, LIMIT {{ ( (LIMIT | int) / (GEN_NGEN | int) ) | int }} {% if TIMING and TIMING!="false" %}, TIMING {{TIMING}}, TIMING_FNT "{{TIMING_FNT}}" {% endif %})
{% endif %}
  -> avgSIN :: AverageCounterIMP(IGNORE $ignore, THRESHOLD $GEN_THRESHOLD)
  $GEN_RECORD
  -> output;
}

{% for t in range($GEN_THREADS|int) %}

    {% set thread=(t%GEN_THREADS + 1) %}

    rr[{{t}}] -> gen{{t}} :: Generator(\<57{{ "%02x" % t  }}>) -> tdIN;
    {% if GEN_PIPELINE %}
        StaticThreadSched(gen{{t}}/replay ${GEN_SOCKET}/{{thread}});
        StaticThreadSched(fdIN0 0/0, unqueue0 0/0);
    {% else %}
        {% if t < $GEN_NGEN %}
            StaticThreadSched(fdIN{{t}} ${GEN_SOCKET}/{{thread}});
            {% if HAVE_UNQUEUE %}
                StaticThreadSched(unqueue{{t}} ${GEN_SOCKET}/{{thread}});
            {% endif %}
        {% endif %}
        {% if REPLAY %}

        StaticThreadSched(gen{{t}}/replay ${GEN_SOCKET}/{{thread}});
        {% endif %}
    {% endif %}
{% endfor %}
{% for t in range($GEN_THREADS,$GEN_NGEN) %}

            {% set thread=(t%GEN_THREADS + 1) %}
            StaticThreadSched(fdIN{{t}} ${GEN_SOCKET}/{{thread}});
            {% if HAVE_UNQUEUE %}
                StaticThreadSched(unqueue{{t}} ${GEN_SOCKET}/{{thread}});
            {% endif %}
{% endfor %}


{% if GEN_TX_PIPELINE %}
    StaticThreadSched(tdIN 0/{{GEN_THREADS + 1}});
{% endif %}

receiveIN :: FromDPDKDevice($port, VERBOSE $rxverbose, MAC $INsrcmac, PROMISC $PROMISC, PAUSE $GEN_PAUSE, NDESC $GEN_DESC, MAXTHREADS $GEN_RX_THREADS, NUMA $GEN_NUMA, ACTIVE $GEN_RX)

elementclass Receiver { $mac, $dir |
    input[0]
$BROADCAST_IGNORE
    -> Strip(14)
//    -> $(( "CheckIP6Header()" if $GEN_IPV6 else "CheckIPHeader(CHECKSUM false)" ))

$GEN_MAGIC

    c[1] //Not for this computer or broadcasts
    -> Discard;

{% for t in range(GEN_THREADS) %}
    magic[{{t}}]
        -> tsd{{t}} :: $GEN_TSDIFF(gen{{t}}/rt, OFFSET {{ NUMBEROFFSET + 2 }}, N $NRECORD, SAMPLE $SAMPLE, NANO $GEN_NANO )
        -> Unstrip(14)
        -> avg{{t}} :: AverageCounterIMP(IGNORE $ignore, THRESHOLD $GEN_THRESHOLD)
        -> Discard;
    tsd{{t}}[1]
        -> Print('WARNING: Untimestamped packet on thread {{t}}', 64)
        -> Discard;
{% endfor %}

$(( (  "avg :: HandlerAggregate( " + ",".join(["ELEMENT avg%d" % (i) for i in range($GEN_THREADS) ]) + " );" ) if 1 else "" ))

    magic[$GEN_THREADS]
    -> Unstrip(14)
    -> Print("WARNING: Unknown magic / untimestamped packet", -1)
    -> Discard;


}

ig :: Script(TYPE ACTIVE,
    goto end $(eq $ITERATION_TIME 0),
    set s $(now),
    set lastcount 0,
    set lastbytes 0,
    set lastbytessent 0,
    set lastsent 0,
    set lastdrop 0,
    set last $s,
    set indexA 0,
    set indexB 0,
    set indexC 0,
    set indexD 0,
    label loop,
    wait ${ITERATION_TIME}s,
    set n $(now), 
    set t $(sub $n $s),
    set elapsed $(sub $n $last),
    set last $n,

                set count $(RIN/avg.add count),
                set sent $(avgSIN.add count),
                set bytessent $(avgSIN.add byte_count),
                set bytes $(RIN/avg.add byte_count),
                set dsent $(sub $sent $lastsent),
                set dbytesent $(sub $bytessent $lastbytessent),
                print "IG-$t-RESULT-${PREFIX}IGSENT $dsent",
                print "IG-$t-RESULT-${PREFIX}IGBYTESSENT $dbytesent",
                print "IG-$t-RESULT-${PREFIX}IGTXPPS $(div $dsent $elapsed)",
                print "IG-$t-RESULT-${PREFIX}IGTX $(div $dbytesent $elapsed)",
                print "IG-$t-RESULT-${PREFIX}IGLINK $(div $(mul $(add $(mul $dsent 24) $dbytesent) 8) $elapsed)",
                set drop $(sub $sent $count),
                set lastdrop $drop,
{% if GEN_RX %}
                print "IG-$t-RESULT-${PREFIX}IGCOUNT $(sub $count $lastcount)",
                print "IG-$t-RESULT-${PREFIX}IGDROPPED $(sub $drop $lastdrop)",
                print "IG-$t-RESULT-${PREFIX}IGTHROUGHPUT $(div $(mul $(add $(mul $(sub $count $lastcount) 24) $(sub $bytes $lastbytes)) 8) $elapsed)",
{% endif %}
                goto next $(eq $DOLAT 0),
//                print "IG-$t-RESULT-${PREFIX}ILAT01 $(RIN/tsd0.perc01 $indexA)",
//                print "IG-$t-RESULT-${PREFIX}ILAT50 $(RIN/tsd0.median $indexA)",
                print "IG-$t-RESULT-${PREFIX}ILATENCY $(RIN/tsd0.average $indexA)",
                print "IG-$t-RESULT-${PREFIX}ILAT99 $(RIN/tsd0.perc99 $indexA)",
                set indexA $(RIN/tsd0.index),
                label next,
                set lastcount $count,
                set lastsent $sent,
                set lastbytes $bytes,
                set lastbytessent $bytessent,
    goto loop,
    label end
)

StaticThreadSched(ig -1);

receiveIN -> RIN :: Receiver($RAW_INsrcmac,"IN");

$(( (  "tsd :: HandlerAggregate( " + ",".join(["ELEMENT RIN/tsd%d" % (i) for i in range($GEN_THREADS) ]) + " );" ) if $DOLAT else "" ))

$(( "avgSIN :: HandlerAggregate( " + ",".join(["ELEMENT gen%d/avgSIN" % (i) for i in range($GEN_THREADS) ]) + " );" ))

timeout :: Script(TYPE PASSIVE,
                wait ${LIMIT_TIME}s,
                print "Timed out...",
                {% for i in range($GEN_THREADS if REPLAY else $GEN_NGEN) %}
                please_stop,
                {% endfor %}
                );

dm :: DriverManager(
                print "Waiting ${GEN_START_DELAY} seconds before launching generation...",
                wait ${GEN_START_DELAY}s,


{% if REPLAY %}
        print "Starting preload...",
        {% for t in range($GEN_NGEN) %}
                write fdIN{{ t }}.active true,
        {% endfor %}

        {% for t in range($GEN_THREADS|int) %}
           write gen{{t}}/replay.active true,
           {% if GEN_ACTIVEDELAY %}
                wait {{GEN_ACTIVEDELAY}}ms,
           {% endif %}
        {% endfor %}
        wait,
        print "Preload 0 finished!",
        print "EVENT GEN_BEGIN",
        print "Starting gen...",
        {% for t in range($GEN_NGEN|int - 1) %}
            wait,
            print "Preload {{t + 1}} finished",
        {% endfor %}
{% else %}
        print "EVENT GEN_BEGIN",
        print "Starting gen...",
        {% for t in range($GEN_NGEN) %}
            write fdIN{{ t }}.active true,

            {% if HAVE_UNQUEUE %}
                write unqueue{{t}}.active true,
            {% endif %}

            {% if GEN_ACTIVEDELAY %}
                wait {{GEN_ACTIVEDELAY}}ms,
            {% endif %}
        {% endfor %}
        // Replay has an integrated timer, but not all generator have support for limit so we launch an external timeout
        print "Starting timer wait...",
        write timeout.run,
{% endif %}
                set starttime $(now),
{% for i in range($GEN_THREADS if REPLAY else $GEN_NGEN) %}
                wait,
{% endfor %}
                set stoptime $(now),
                print "EVENT GEN_DONE",
                wait 1s,
                read receiveIN.hw_count,
                read receiveIN.count,
                read receiveIN.xstats,
                goto alatval $(eq $DOLAT 0),
                goto adump $(eq $DODUMP 0),
/*                print "Dumping latency samples to $LATENCYDUMP",
                print >$LATENCYDUMP $(RIN/tsdA.dump_list),
                print >>$LATENCYDUMP $(RIN/tsdB.dump_list),
                print >>$LATENCYDUMP $(RIN/tsdC.dump_list),
                print >>$LATENCYDUMP $(RIN/tsdD.dump_list),*/
                label adump,

                print "RESULT-${PREFIX}LATENCY $(tsd.avg average)",
                print "RESULT-${PREFIX}LAT00 $(tsd.avg min)",
                print "RESULT-${PREFIX}LAT01 $(tsd.avg perc01)",
                print "RESULT-${PREFIX}LAT50 $(tsd.avg median)",
                print "RESULT-${PREFIX}LAT95 $(tsd.avg perc95)",
                print "RESULT-${PREFIX}LAT99 $(tsd.avg perc99)",
                print "RESULT-${PREFIX}LAT999 $(tsd.avg perc 99.9)",
                print "RESULT-${PREFIX}LAT100 $(tsd.avg max)",
                goto alatval $(eq ${DOLATVAL} 0),

                //The following is to generate values for a CDF
                set i 0,
                set step 1,
                label perc,
                print "CDFLATVAL-$(tsd.avg perc $i)-RESULT-${PREFIX}CDFLATPC $(div $i 100.0)",
                set i $(add $i $step),
                set step $(if $(ge $i 99) 0.1 1),
                goto perc $(le $i 100.0),
                label alatval,
                print "RESULT-${PREFIX}TESTTIME $(sub $stoptime $starttime)",
                print "RESULT-${PREFIX}SENTTIME $(avgSIN.avg time)",

                //RX statistics
                set sent $(avgSIN.add count),
                set count $(RIN/avg.add count),
                set bytes $(RIN/avg.add byte_count),
{% if GEN_RX %}
                print "RESULT-${PREFIX}RCVTIME $(RIN/avg.avg time)",
                print "RESULT-${PREFIX}THROUGHPUT $(RIN/avg.add link_rate)", 
                print "RESULT-${PREFIX}COUNT $count",
                print "RESULT-${PREFIX}BYTES $bytes",
                print "RESULT-${PREFIX}DROPPED $(sub $sent $count)",
                print "RESULT-${PREFIX}DROPPEDPC $(div $(sub $sent $count) $sent)",
                print "RESULT-${PREFIX}DROPPEDPS $(div $(sub $sent $count) $(RIN/avg.avg time))",
                print "RESULT-${PREFIX}PPS $(RIN/avg.add rate)",
{% endif %}

                //TX stats
                print "RESULT-${PREFIX}SENT $sent",
                print "RESULT-${PREFIX}TX $(avgSIN.add link_rate)",
                print "RESULT-${PREFIX}TXPPS $(avgSIN.add rate)",
{% if GEN_DEBUG %}
    {% for t in range($GEN_THREADS) %}
        print "thread {{t}} rate $(gen{{t}}/avgSIN.rate) time $(gen{{t}}/avgSIN.time)",
    {% endfor %}
{% endif %}

                print "EVENT GEN_POST",
                stop);

StaticThreadSched(dm -1);

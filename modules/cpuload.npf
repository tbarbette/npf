%script
unbuffer python3 cpuload.py "${NPF_ROLE}"

%variables
CPUMIN=0
CPUMAX=128
CPUTHRESH=1
CPUSUM=0

%init
python3 -m pip install parse || python -m pip install parse

%file cpuload.py
from time import sleep,time
from parse import parse
from collections import defaultdict
import sys

last_idle = defaultdict(int)
last_total = defaultdict(int)
thresh = False
name=sys.argv[1]
while True:
    csum=0
    t = time()
    do_thresh = False
    with open('/proc/stat') as f:
      f.readline()
      while True:
        fields = f.readline().strip().split()
        matches = parse("cpu{}", fields[0])
        if matches is None:
            break
        cpuid = int(matches[0])
        fields = [float(column) for column in fields[1:]]
        idle, total = fields[3], sum(fields)
        idle_delta, total_delta = idle - last_idle[cpuid], total - last_total[cpuid]
        last_idle[cpuid], last_total[cpuid] = idle, total
        utilisation = 100.0 * (1.0 - idle_delta / total_delta)
        if cpuid < $CPUMAX and cpuid >= $CPUMIN:
            if $CPUTHRESH > 0:
                if utilisation > $CPUTHRESH and not thresh:
                    do_thresh=True
                if not thresh:
                    continue
            if $CPUSUM:
                csum+=utilisation
            else:
                print('TLOAD-%f-RESULT-CPU-%d %f' % (t,cpuid,utilisation))
    if do_thresh:
        thresh = True
    if $CPUSUM:
        print('TLOAD-%f-RESULT-%s-CPUSUM %f' % (t,name,csum))
    sleep(1)

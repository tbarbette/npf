// Perf stat

%variables
N_CORES=1
PERF_TIME=1
PERF_EVENTS=instructions,cycles,cache-misses,cache-references
perf_all:PERF_EVENTS=dTLB-loads,instructions,cycles,iTLB-loads,cache-misses,cache-references,dTLB-load-misses,iTLB-load-misses,mem-loads,l2_rqsts.references,l2_rqsts.miss,cycle_activity.stalls_l3_miss,cycle_activity.stalls_total,cycle_activity.stalls_mem_any,cycle_activity.stalls_l2_miss,cycle_activity.stalls_l1d_miss,L1-icache-load-misses,L1-icache-loads,L1-dcache-stores,l1d.replacement,l2_rqsts.all_pf,mem_load_retired.l1_hit,mem_load_retired.l1_miss

%script sudo=true autokill=false python-inline
echo "Starting perf..."
perf stat -a -I 1000 -C 0-$(( $N_CORES - 1 )) -e "LLC-loads,LLC-load-misses,L1-dcache-load-misses,L1-dcache-loads,branch-misses,${PERF_EVENTS}" -o stats.log sleep $PERF_TIME
if [ $? -ne 0 ] ; then
    echo "ERROR! Perf could not run !"
fi
echo "EVENT PERF_DONE"


echo "Analyzing stats..."
chmod +x cache-stats.sh
if true ; then
    sudo bash cache-stats.sh stats.log
fi

echo "EVENT PERF_PARSED"

//-----------------------
// Script Files
//-----------------------

%file cache-stats.sh python-inline
#!/bin/bash

FILE=$1

kill_current_running_perfs () {
    perf_pids="$(ps -A | grep -E \"\sperf$\" | awk '{print $1}')"
    for pid in $perf_pids; do
        kill -9 $pid
    done
}

calculate_and_print_stats () {
    cat $FILE

    declare -a events
    declare -A totals
    events+=("LLC-load-misses;LLC-MISSES")
    events+=("LLC-loads;LLC-LOADS")
    events+=("L1-icache-load-misses;L1I-MISSES")
    events+=("branch-misses;BRANCH-MISSES")
    events+=("L1-dcache-loads;L1-LOADS")
    events+=("L1-dcache-load-misses;L1-LOAD-MISSES")
    $(( "\n".join([ 'events+=("%s;%s")' % (ev,ev) for ev in "${PERF_EVENTS}".split(",") ]) ))

    for event in "${events[@]}"
    do
        IFS=";" read -r -a arr <<< "${event}"
        ev=${arr[0]}
        et=${arr[1]}
        counters=$(perl -pe 's/(?<=\d),(?=\d)//g' $FILE | awk '$3 == "'$ev'" {print $2}')
        count=0
        total_ev=0

        for miss in $counters; do
            num=$(echo $miss | tr -dc '0-9')
            count=`expr $count + 1`
            total_ev=`expr $total_ev + $num`
        done
        echo "RESULT-TOTAL-$et $total_ev"
        totals[$ev]=$total_ev
    done

    if [[ ${totals[L1-dcache-load-misses]} -gt 0 ]] ; then
        l1missratio=`echo ${totals[L1-dcache-load-misses]} / ${totals[L1-dcache-loads]} | bc -l`
        echo "RESULT-L1-RATIO $l1missratio"
    fi

    if [[ ${totals[LLC-loads]} -gt 0 ]] ; then
        llcmissratio=`echo ${totals[LLC-load-misses]} / ${totals[LLC-loads]} | bc -l`
        echo "RESULT-LLC-RATIO $llcmissratio"
    fi

    echo "RESULT-IPC `echo ${totals[instructions]} / ${totals[cycles]} | bc -l`"
    if [[ ${totals[iTLB-loads]} -gt 0 ]] ; then
        echo "RESULT-iTLB-RATIO `echo ${totals[iTLB-load-misses]} / ${totals[iTLB-loads]} | bc -l`"
    fi

    if [[ ${totals[dTLB-loads]} -gt 0 ]] ; then
        echo "RESULT-dTLB-RATIO `echo ${totals[dTLB-load-misses]} / ${totals[dTLB-loads]} | bc -l`"
    fi

}

if test -f "$FILE"; then
    echo "starting cache analyze!"
    kill_current_running_perfs
    calculate_and_print_stats
    #rm -rf $FILE
fi

exit 0

